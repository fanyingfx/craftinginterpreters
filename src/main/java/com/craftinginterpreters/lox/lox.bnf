

{
  tokens=[
//  keywords="regexp:var|if|else|for|or|and"
  number="regexp:\d+"
  IDENTIFIER="regexp:\p{Alpha}\w*"
  string='regexp:"\w+"'
  space='regexp:\s+'
  ]
}
// a == x?b==y?i:j:k
// a==x?3*4:5==6
program ::= declaration* <<eof>>;
declaration ::= funDecl
                |varDecl
                | statement;
funDecl ::= fun function;
block ::= "{" declaration "}";
function ::= IDENTIFIER "(" parameters? ")" block;
parameters ::= IDENTIFIER ("," IDENTIFIER)* ;
varDecl ::= var IDENTIFIER ( "=" expression)? ";";
statement ::= exprStmt
    |forStmt
    |ifStmt
    |printStmt
    |returnStmt
    |whileStmt
    |block;
returnStmt ::= return expression? ';';
forStmt ::= for "(" (varDecl| exprStmt| ";" )
                expression? ";"
                expression? ")" statement;
whileStmt ::= while "(" expression ")" statement;
ifStmt ::= if "(" expression ")" statement
            (else statement)? ;
exprStmt ::= expression ";";
printStmt ::= print expression ";";

expression ::= assignment;
assignment ::= IDENTIFIER "=" assignment
            |logic_or ;
logic_or ::= logic_and( "or" logic_and)*;
logic_and ::= equality("and" equality)*;
//ternary::= equality"?"ternary+":"ternary+;
//comma ::= equality("," equality)*;
equality ::= comparison ( ("!=" | "==") comparison )*;
comparison ::= term ((">"|">="|"<"|"<=") term )*;
term ::= factor (("-"|"+") factor)*;
factor ::=unary(("/"|"*")unary)*;
unary ::=("!"|"-") unary | call;
primary ::= number|string|"true"|"false"|"nil"|"(" expression ")"|IDENTIFIER;
call ::= primary ("(" arguments? ")")*;
arguments ::= expression ("," expression)*;